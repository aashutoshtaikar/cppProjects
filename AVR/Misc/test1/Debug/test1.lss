
test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000500  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000500  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000708  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d6e  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019fc  2**2
                  CONTENTS, READONLY
  6 .debug_info   00000780  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  000028d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  000028ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  7c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  80:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  84:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  88:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

int main(void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	6e 97       	sbiw	r28, 0x1e	; 30
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
      DDRB = 0xFF;      // configure Port B dir register pins for output
  b8:	87 e3       	ldi	r24, 0x37	; 55
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	  PORTB = 0x00;
  c2:	88 e3       	ldi	r24, 0x38	; 56
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	aa ef       	ldi	r26, 0xFA	; 250
  d0:	b3 e4       	ldi	r27, 0x43	; 67
  d2:	8f 83       	std	Y+7, r24	; 0x07
  d4:	98 87       	std	Y+8, r25	; 0x08
  d6:	a9 87       	std	Y+9, r26	; 0x09
  d8:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	4a e7       	ldi	r20, 0x7A	; 122
  e0:	55 e4       	ldi	r21, 0x45	; 69
  e2:	6f 81       	ldd	r22, Y+7	; 0x07
  e4:	78 85       	ldd	r23, Y+8	; 0x08
  e6:	89 85       	ldd	r24, Y+9	; 0x09
  e8:	9a 85       	ldd	r25, Y+10	; 0x0a
  ea:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__mulsf3>
  ee:	dc 01       	movw	r26, r24
  f0:	cb 01       	movw	r24, r22
  f2:	8b 87       	std	Y+11, r24	; 0x0b
  f4:	9c 87       	std	Y+12, r25	; 0x0c
  f6:	ad 87       	std	Y+13, r26	; 0x0d
  f8:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 e8       	ldi	r20, 0x80	; 128
 100:	5f e3       	ldi	r21, 0x3F	; 63
 102:	6b 85       	ldd	r22, Y+11	; 0x0b
 104:	7c 85       	ldd	r23, Y+12	; 0x0c
 106:	8d 85       	ldd	r24, Y+13	; 0x0d
 108:	9e 85       	ldd	r25, Y+14	; 0x0e
 10a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__cmpsf2>
 10e:	88 23       	and	r24, r24
 110:	2c f4       	brge	.+10     	; 0x11c <main+0x78>
		__ticks = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	98 8b       	std	Y+16, r25	; 0x10
 118:	8f 87       	std	Y+15, r24	; 0x0f
 11a:	3f c0       	rjmp	.+126    	; 0x19a <main+0xf6>
	else if (__tmp > 65535)
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	3f ef       	ldi	r19, 0xFF	; 255
 120:	4f e7       	ldi	r20, 0x7F	; 127
 122:	57 e4       	ldi	r21, 0x47	; 71
 124:	6b 85       	ldd	r22, Y+11	; 0x0b
 126:	7c 85       	ldd	r23, Y+12	; 0x0c
 128:	8d 85       	ldd	r24, Y+13	; 0x0d
 12a:	9e 85       	ldd	r25, Y+14	; 0x0e
 12c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__gesf2>
 130:	18 16       	cp	r1, r24
 132:	4c f5       	brge	.+82     	; 0x186 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e2       	ldi	r20, 0x20	; 32
 13a:	51 e4       	ldi	r21, 0x41	; 65
 13c:	6f 81       	ldd	r22, Y+7	; 0x07
 13e:	78 85       	ldd	r23, Y+8	; 0x08
 140:	89 85       	ldd	r24, Y+9	; 0x09
 142:	9a 85       	ldd	r25, Y+10	; 0x0a
 144:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__mulsf3>
 148:	dc 01       	movw	r26, r24
 14a:	cb 01       	movw	r24, r22
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfsi>
 154:	dc 01       	movw	r26, r24
 156:	cb 01       	movw	r24, r22
 158:	98 8b       	std	Y+16, r25	; 0x10
 15a:	8f 87       	std	Y+15, r24	; 0x0f
 15c:	0f c0       	rjmp	.+30     	; 0x17c <main+0xd8>
 15e:	80 e9       	ldi	r24, 0x90	; 144
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	9a 8b       	std	Y+18, r25	; 0x12
 164:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 166:	89 89       	ldd	r24, Y+17	; 0x11
 168:	9a 89       	ldd	r25, Y+18	; 0x12
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0xc6>
 16e:	9a 8b       	std	Y+18, r25	; 0x12
 170:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 172:	8f 85       	ldd	r24, Y+15	; 0x0f
 174:	98 89       	ldd	r25, Y+16	; 0x10
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	98 8b       	std	Y+16, r25	; 0x10
 17a:	8f 87       	std	Y+15, r24	; 0x0f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17c:	8f 85       	ldd	r24, Y+15	; 0x0f
 17e:	98 89       	ldd	r25, Y+16	; 0x10
 180:	89 2b       	or	r24, r25
 182:	69 f7       	brne	.-38     	; 0x15e <main+0xba>
 184:	14 c0       	rjmp	.+40     	; 0x1ae <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 186:	6b 85       	ldd	r22, Y+11	; 0x0b
 188:	7c 85       	ldd	r23, Y+12	; 0x0c
 18a:	8d 85       	ldd	r24, Y+13	; 0x0d
 18c:	9e 85       	ldd	r25, Y+14	; 0x0e
 18e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfsi>
 192:	dc 01       	movw	r26, r24
 194:	cb 01       	movw	r24, r22
 196:	98 8b       	std	Y+16, r25	; 0x10
 198:	8f 87       	std	Y+15, r24	; 0x0f
 19a:	8f 85       	ldd	r24, Y+15	; 0x0f
 19c:	98 89       	ldd	r25, Y+16	; 0x10
 19e:	9c 8b       	std	Y+20, r25	; 0x14
 1a0:	8b 8b       	std	Y+19, r24	; 0x13
 1a2:	8b 89       	ldd	r24, Y+19	; 0x13
 1a4:	9c 89       	ldd	r25, Y+20	; 0x14
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x102>
 1aa:	9c 8b       	std	Y+20, r25	; 0x14
 1ac:	8b 8b       	std	Y+19, r24	; 0x13
	  _delay_ms(500);
      while (1) { // loop forever
    	  for(int i=0; i<8; i++){
 1ae:	1a 82       	std	Y+2, r1	; 0x02
 1b0:	19 82       	std	Y+1, r1	; 0x01
 1b2:	83 c0       	rjmp	.+262    	; 0x2ba <main+0x216>
    		 PORTB = 0x01 << i;
 1b4:	88 e3       	ldi	r24, 0x38	; 56
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	09 80       	ldd	r0, Y+1	; 0x01
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <main+0x120>
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	0a 94       	dec	r0
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <main+0x11c>
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	aa ef       	ldi	r26, 0xFA	; 250
 1d2:	b3 e4       	ldi	r27, 0x43	; 67
 1d4:	8b 83       	std	Y+3, r24	; 0x03
 1d6:	9c 83       	std	Y+4, r25	; 0x04
 1d8:	ad 83       	std	Y+5, r26	; 0x05
 1da:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	4a e7       	ldi	r20, 0x7A	; 122
 1e2:	55 e4       	ldi	r21, 0x45	; 69
 1e4:	6b 81       	ldd	r22, Y+3	; 0x03
 1e6:	7c 81       	ldd	r23, Y+4	; 0x04
 1e8:	8d 81       	ldd	r24, Y+5	; 0x05
 1ea:	9e 81       	ldd	r25, Y+6	; 0x06
 1ec:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__mulsf3>
 1f0:	dc 01       	movw	r26, r24
 1f2:	cb 01       	movw	r24, r22
 1f4:	8d 8b       	std	Y+21, r24	; 0x15
 1f6:	9e 8b       	std	Y+22, r25	; 0x16
 1f8:	af 8b       	std	Y+23, r26	; 0x17
 1fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e8       	ldi	r20, 0x80	; 128
 202:	5f e3       	ldi	r21, 0x3F	; 63
 204:	6d 89       	ldd	r22, Y+21	; 0x15
 206:	7e 89       	ldd	r23, Y+22	; 0x16
 208:	8f 89       	ldd	r24, Y+23	; 0x17
 20a:	98 8d       	ldd	r25, Y+24	; 0x18
 20c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__cmpsf2>
 210:	88 23       	and	r24, r24
 212:	2c f4       	brge	.+10     	; 0x21e <main+0x17a>
		__ticks = 1;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	9a 8f       	std	Y+26, r25	; 0x1a
 21a:	89 8f       	std	Y+25, r24	; 0x19
 21c:	3f c0       	rjmp	.+126    	; 0x29c <main+0x1f8>
	else if (__tmp > 65535)
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	3f ef       	ldi	r19, 0xFF	; 255
 222:	4f e7       	ldi	r20, 0x7F	; 127
 224:	57 e4       	ldi	r21, 0x47	; 71
 226:	6d 89       	ldd	r22, Y+21	; 0x15
 228:	7e 89       	ldd	r23, Y+22	; 0x16
 22a:	8f 89       	ldd	r24, Y+23	; 0x17
 22c:	98 8d       	ldd	r25, Y+24	; 0x18
 22e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__gesf2>
 232:	18 16       	cp	r1, r24
 234:	4c f5       	brge	.+82     	; 0x288 <main+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e2       	ldi	r20, 0x20	; 32
 23c:	51 e4       	ldi	r21, 0x41	; 65
 23e:	6b 81       	ldd	r22, Y+3	; 0x03
 240:	7c 81       	ldd	r23, Y+4	; 0x04
 242:	8d 81       	ldd	r24, Y+5	; 0x05
 244:	9e 81       	ldd	r25, Y+6	; 0x06
 246:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__mulsf3>
 24a:	dc 01       	movw	r26, r24
 24c:	cb 01       	movw	r24, r22
 24e:	bc 01       	movw	r22, r24
 250:	cd 01       	movw	r24, r26
 252:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfsi>
 256:	dc 01       	movw	r26, r24
 258:	cb 01       	movw	r24, r22
 25a:	9a 8f       	std	Y+26, r25	; 0x1a
 25c:	89 8f       	std	Y+25, r24	; 0x19
 25e:	0f c0       	rjmp	.+30     	; 0x27e <main+0x1da>
 260:	80 e9       	ldi	r24, 0x90	; 144
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	9c 8f       	std	Y+28, r25	; 0x1c
 266:	8b 8f       	std	Y+27, r24	; 0x1b
 268:	8b 8d       	ldd	r24, Y+27	; 0x1b
 26a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x1c8>
 270:	9c 8f       	std	Y+28, r25	; 0x1c
 272:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 274:	89 8d       	ldd	r24, Y+25	; 0x19
 276:	9a 8d       	ldd	r25, Y+26	; 0x1a
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	9a 8f       	std	Y+26, r25	; 0x1a
 27c:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 27e:	89 8d       	ldd	r24, Y+25	; 0x19
 280:	9a 8d       	ldd	r25, Y+26	; 0x1a
 282:	89 2b       	or	r24, r25
 284:	69 f7       	brne	.-38     	; 0x260 <main+0x1bc>
 286:	14 c0       	rjmp	.+40     	; 0x2b0 <main+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 288:	6d 89       	ldd	r22, Y+21	; 0x15
 28a:	7e 89       	ldd	r23, Y+22	; 0x16
 28c:	8f 89       	ldd	r24, Y+23	; 0x17
 28e:	98 8d       	ldd	r25, Y+24	; 0x18
 290:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__fixunssfsi>
 294:	dc 01       	movw	r26, r24
 296:	cb 01       	movw	r24, r22
 298:	9a 8f       	std	Y+26, r25	; 0x1a
 29a:	89 8f       	std	Y+25, r24	; 0x19
 29c:	89 8d       	ldd	r24, Y+25	; 0x19
 29e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2a0:	9e 8f       	std	Y+30, r25	; 0x1e
 2a2:	8d 8f       	std	Y+29, r24	; 0x1d
 2a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <main+0x204>
 2ac:	9e 8f       	std	Y+30, r25	; 0x1e
 2ae:	8d 8f       	std	Y+29, r24	; 0x1d
{
      DDRB = 0xFF;      // configure Port B dir register pins for output
	  PORTB = 0x00;
	  _delay_ms(500);
      while (1) { // loop forever
    	  for(int i=0; i<8; i++){
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	9a 81       	ldd	r25, Y+2	; 0x02
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	9a 83       	std	Y+2, r25	; 0x02
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	9a 81       	ldd	r25, Y+2	; 0x02
 2be:	08 97       	sbiw	r24, 0x08	; 8
 2c0:	0c f4       	brge	.+2      	; 0x2c4 <main+0x220>
 2c2:	78 cf       	rjmp	.-272    	; 0x1b4 <main+0x110>
    		 PORTB = 0x01 << i;
            _delay_ms(500);
    	  }
      }
 2c4:	74 cf       	rjmp	.-280    	; 0x1ae <main+0x10a>

000002c6 <__cmpsf2>:
 2c6:	0e 94 97 01 	call	0x32e	; 0x32e <__fp_cmp>
 2ca:	08 f4       	brcc	.+2      	; 0x2ce <__cmpsf2+0x8>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	08 95       	ret

000002d0 <__fixunssfsi>:
 2d0:	0e 94 c3 01 	call	0x386	; 0x386 <__fp_splitA>
 2d4:	88 f0       	brcs	.+34     	; 0x2f8 <__fixunssfsi+0x28>
 2d6:	9f 57       	subi	r25, 0x7F	; 127
 2d8:	98 f0       	brcs	.+38     	; 0x300 <__fixunssfsi+0x30>
 2da:	b9 2f       	mov	r27, r25
 2dc:	99 27       	eor	r25, r25
 2de:	b7 51       	subi	r27, 0x17	; 23
 2e0:	b0 f0       	brcs	.+44     	; 0x30e <__fixunssfsi+0x3e>
 2e2:	e1 f0       	breq	.+56     	; 0x31c <__fixunssfsi+0x4c>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	88 1f       	adc	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	1a f0       	brmi	.+6      	; 0x2f4 <__fixunssfsi+0x24>
 2ee:	ba 95       	dec	r27
 2f0:	c9 f7       	brne	.-14     	; 0x2e4 <__fixunssfsi+0x14>
 2f2:	14 c0       	rjmp	.+40     	; 0x31c <__fixunssfsi+0x4c>
 2f4:	b1 30       	cpi	r27, 0x01	; 1
 2f6:	91 f0       	breq	.+36     	; 0x31c <__fixunssfsi+0x4c>
 2f8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__fp_zero>
 2fc:	b1 e0       	ldi	r27, 0x01	; 1
 2fe:	08 95       	ret
 300:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__fp_zero>
 304:	67 2f       	mov	r22, r23
 306:	78 2f       	mov	r23, r24
 308:	88 27       	eor	r24, r24
 30a:	b8 5f       	subi	r27, 0xF8	; 248
 30c:	39 f0       	breq	.+14     	; 0x31c <__fixunssfsi+0x4c>
 30e:	b9 3f       	cpi	r27, 0xF9	; 249
 310:	cc f3       	brlt	.-14     	; 0x304 <__fixunssfsi+0x34>
 312:	86 95       	lsr	r24
 314:	77 95       	ror	r23
 316:	67 95       	ror	r22
 318:	b3 95       	inc	r27
 31a:	d9 f7       	brne	.-10     	; 0x312 <__fixunssfsi+0x42>
 31c:	3e f4       	brtc	.+14     	; 0x32c <__fixunssfsi+0x5c>
 31e:	90 95       	com	r25
 320:	80 95       	com	r24
 322:	70 95       	com	r23
 324:	61 95       	neg	r22
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	8f 4f       	sbci	r24, 0xFF	; 255
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	08 95       	ret

0000032e <__fp_cmp>:
 32e:	99 0f       	add	r25, r25
 330:	00 08       	sbc	r0, r0
 332:	55 0f       	add	r21, r21
 334:	aa 0b       	sbc	r26, r26
 336:	e0 e8       	ldi	r30, 0x80	; 128
 338:	fe ef       	ldi	r31, 0xFE	; 254
 33a:	16 16       	cp	r1, r22
 33c:	17 06       	cpc	r1, r23
 33e:	e8 07       	cpc	r30, r24
 340:	f9 07       	cpc	r31, r25
 342:	c0 f0       	brcs	.+48     	; 0x374 <__fp_cmp+0x46>
 344:	12 16       	cp	r1, r18
 346:	13 06       	cpc	r1, r19
 348:	e4 07       	cpc	r30, r20
 34a:	f5 07       	cpc	r31, r21
 34c:	98 f0       	brcs	.+38     	; 0x374 <__fp_cmp+0x46>
 34e:	62 1b       	sub	r22, r18
 350:	73 0b       	sbc	r23, r19
 352:	84 0b       	sbc	r24, r20
 354:	95 0b       	sbc	r25, r21
 356:	39 f4       	brne	.+14     	; 0x366 <__fp_cmp+0x38>
 358:	0a 26       	eor	r0, r26
 35a:	61 f0       	breq	.+24     	; 0x374 <__fp_cmp+0x46>
 35c:	23 2b       	or	r18, r19
 35e:	24 2b       	or	r18, r20
 360:	25 2b       	or	r18, r21
 362:	21 f4       	brne	.+8      	; 0x36c <__fp_cmp+0x3e>
 364:	08 95       	ret
 366:	0a 26       	eor	r0, r26
 368:	09 f4       	brne	.+2      	; 0x36c <__fp_cmp+0x3e>
 36a:	a1 40       	sbci	r26, 0x01	; 1
 36c:	a6 95       	lsr	r26
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	81 1d       	adc	r24, r1
 372:	81 1d       	adc	r24, r1
 374:	08 95       	ret

00000376 <__fp_split3>:
 376:	57 fd       	sbrc	r21, 7
 378:	90 58       	subi	r25, 0x80	; 128
 37a:	44 0f       	add	r20, r20
 37c:	55 1f       	adc	r21, r21
 37e:	59 f0       	breq	.+22     	; 0x396 <__fp_splitA+0x10>
 380:	5f 3f       	cpi	r21, 0xFF	; 255
 382:	71 f0       	breq	.+28     	; 0x3a0 <__fp_splitA+0x1a>
 384:	47 95       	ror	r20

00000386 <__fp_splitA>:
 386:	88 0f       	add	r24, r24
 388:	97 fb       	bst	r25, 7
 38a:	99 1f       	adc	r25, r25
 38c:	61 f0       	breq	.+24     	; 0x3a6 <__fp_splitA+0x20>
 38e:	9f 3f       	cpi	r25, 0xFF	; 255
 390:	79 f0       	breq	.+30     	; 0x3b0 <__fp_splitA+0x2a>
 392:	87 95       	ror	r24
 394:	08 95       	ret
 396:	12 16       	cp	r1, r18
 398:	13 06       	cpc	r1, r19
 39a:	14 06       	cpc	r1, r20
 39c:	55 1f       	adc	r21, r21
 39e:	f2 cf       	rjmp	.-28     	; 0x384 <__fp_split3+0xe>
 3a0:	46 95       	lsr	r20
 3a2:	f1 df       	rcall	.-30     	; 0x386 <__fp_splitA>
 3a4:	08 c0       	rjmp	.+16     	; 0x3b6 <__fp_splitA+0x30>
 3a6:	16 16       	cp	r1, r22
 3a8:	17 06       	cpc	r1, r23
 3aa:	18 06       	cpc	r1, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	f1 cf       	rjmp	.-30     	; 0x392 <__fp_splitA+0xc>
 3b0:	86 95       	lsr	r24
 3b2:	71 05       	cpc	r23, r1
 3b4:	61 05       	cpc	r22, r1
 3b6:	08 94       	sec
 3b8:	08 95       	ret

000003ba <__fp_zero>:
 3ba:	e8 94       	clt

000003bc <__fp_szero>:
 3bc:	bb 27       	eor	r27, r27
 3be:	66 27       	eor	r22, r22
 3c0:	77 27       	eor	r23, r23
 3c2:	cb 01       	movw	r24, r22
 3c4:	97 f9       	bld	r25, 7
 3c6:	08 95       	ret

000003c8 <__gesf2>:
 3c8:	0e 94 97 01 	call	0x32e	; 0x32e <__fp_cmp>
 3cc:	08 f4       	brcc	.+2      	; 0x3d0 <__gesf2+0x8>
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	08 95       	ret

000003d2 <__mulsf3>:
 3d2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <__mulsf3x>
 3d6:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_round>
 3da:	0e 94 5f 02 	call	0x4be	; 0x4be <__fp_pscA>
 3de:	38 f0       	brcs	.+14     	; 0x3ee <__mulsf3+0x1c>
 3e0:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fp_pscB>
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__mulsf3+0x1c>
 3e6:	95 23       	and	r25, r21
 3e8:	11 f0       	breq	.+4      	; 0x3ee <__mulsf3+0x1c>
 3ea:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__fp_inf>
 3ee:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__fp_nan>
 3f2:	11 24       	eor	r1, r1
 3f4:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__fp_szero>

000003f8 <__mulsf3x>:
 3f8:	0e 94 bb 01 	call	0x376	; 0x376 <__fp_split3>
 3fc:	70 f3       	brcs	.-36     	; 0x3da <__mulsf3+0x8>

000003fe <__mulsf3_pse>:
 3fe:	95 9f       	mul	r25, r21
 400:	c1 f3       	breq	.-16     	; 0x3f2 <__mulsf3+0x20>
 402:	95 0f       	add	r25, r21
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	55 1f       	adc	r21, r21
 408:	62 9f       	mul	r22, r18
 40a:	f0 01       	movw	r30, r0
 40c:	72 9f       	mul	r23, r18
 40e:	bb 27       	eor	r27, r27
 410:	f0 0d       	add	r31, r0
 412:	b1 1d       	adc	r27, r1
 414:	63 9f       	mul	r22, r19
 416:	aa 27       	eor	r26, r26
 418:	f0 0d       	add	r31, r0
 41a:	b1 1d       	adc	r27, r1
 41c:	aa 1f       	adc	r26, r26
 41e:	64 9f       	mul	r22, r20
 420:	66 27       	eor	r22, r22
 422:	b0 0d       	add	r27, r0
 424:	a1 1d       	adc	r26, r1
 426:	66 1f       	adc	r22, r22
 428:	82 9f       	mul	r24, r18
 42a:	22 27       	eor	r18, r18
 42c:	b0 0d       	add	r27, r0
 42e:	a1 1d       	adc	r26, r1
 430:	62 1f       	adc	r22, r18
 432:	73 9f       	mul	r23, r19
 434:	b0 0d       	add	r27, r0
 436:	a1 1d       	adc	r26, r1
 438:	62 1f       	adc	r22, r18
 43a:	83 9f       	mul	r24, r19
 43c:	a0 0d       	add	r26, r0
 43e:	61 1d       	adc	r22, r1
 440:	22 1f       	adc	r18, r18
 442:	74 9f       	mul	r23, r20
 444:	33 27       	eor	r19, r19
 446:	a0 0d       	add	r26, r0
 448:	61 1d       	adc	r22, r1
 44a:	23 1f       	adc	r18, r19
 44c:	84 9f       	mul	r24, r20
 44e:	60 0d       	add	r22, r0
 450:	21 1d       	adc	r18, r1
 452:	82 2f       	mov	r24, r18
 454:	76 2f       	mov	r23, r22
 456:	6a 2f       	mov	r22, r26
 458:	11 24       	eor	r1, r1
 45a:	9f 57       	subi	r25, 0x7F	; 127
 45c:	50 40       	sbci	r21, 0x00	; 0
 45e:	9a f0       	brmi	.+38     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 460:	f1 f0       	breq	.+60     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 462:	88 23       	and	r24, r24
 464:	4a f0       	brmi	.+18     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	bb 1f       	adc	r27, r27
 46c:	66 1f       	adc	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	88 1f       	adc	r24, r24
 472:	91 50       	subi	r25, 0x01	; 1
 474:	50 40       	sbci	r21, 0x00	; 0
 476:	a9 f7       	brne	.-22     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 478:	9e 3f       	cpi	r25, 0xFE	; 254
 47a:	51 05       	cpc	r21, r1
 47c:	80 f0       	brcs	.+32     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 47e:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__fp_inf>
 482:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__fp_szero>
 486:	5f 3f       	cpi	r21, 0xFF	; 255
 488:	e4 f3       	brlt	.-8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 48a:	98 3e       	cpi	r25, 0xE8	; 232
 48c:	d4 f3       	brlt	.-12     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 48e:	86 95       	lsr	r24
 490:	77 95       	ror	r23
 492:	67 95       	ror	r22
 494:	b7 95       	ror	r27
 496:	f7 95       	ror	r31
 498:	e7 95       	ror	r30
 49a:	9f 5f       	subi	r25, 0xFF	; 255
 49c:	c1 f7       	brne	.-16     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 49e:	fe 2b       	or	r31, r30
 4a0:	88 0f       	add	r24, r24
 4a2:	91 1d       	adc	r25, r1
 4a4:	96 95       	lsr	r25
 4a6:	87 95       	ror	r24
 4a8:	97 f9       	bld	r25, 7
 4aa:	08 95       	ret

000004ac <__fp_inf>:
 4ac:	97 f9       	bld	r25, 7
 4ae:	9f 67       	ori	r25, 0x7F	; 127
 4b0:	80 e8       	ldi	r24, 0x80	; 128
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	08 95       	ret

000004b8 <__fp_nan>:
 4b8:	9f ef       	ldi	r25, 0xFF	; 255
 4ba:	80 ec       	ldi	r24, 0xC0	; 192
 4bc:	08 95       	ret

000004be <__fp_pscA>:
 4be:	00 24       	eor	r0, r0
 4c0:	0a 94       	dec	r0
 4c2:	16 16       	cp	r1, r22
 4c4:	17 06       	cpc	r1, r23
 4c6:	18 06       	cpc	r1, r24
 4c8:	09 06       	cpc	r0, r25
 4ca:	08 95       	ret

000004cc <__fp_pscB>:
 4cc:	00 24       	eor	r0, r0
 4ce:	0a 94       	dec	r0
 4d0:	12 16       	cp	r1, r18
 4d2:	13 06       	cpc	r1, r19
 4d4:	14 06       	cpc	r1, r20
 4d6:	05 06       	cpc	r0, r21
 4d8:	08 95       	ret

000004da <__fp_round>:
 4da:	09 2e       	mov	r0, r25
 4dc:	03 94       	inc	r0
 4de:	00 0c       	add	r0, r0
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <__fp_round+0xc>
 4e2:	88 23       	and	r24, r24
 4e4:	52 f0       	brmi	.+20     	; 0x4fa <__fp_round+0x20>
 4e6:	bb 0f       	add	r27, r27
 4e8:	40 f4       	brcc	.+16     	; 0x4fa <__fp_round+0x20>
 4ea:	bf 2b       	or	r27, r31
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <__fp_round+0x18>
 4ee:	60 ff       	sbrs	r22, 0
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <__fp_round+0x20>
 4f2:	6f 5f       	subi	r22, 0xFF	; 255
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	08 95       	ret

000004fc <_exit>:
 4fc:	f8 94       	cli

000004fe <__stop_program>:
 4fe:	ff cf       	rjmp	.-2      	; 0x4fe <__stop_program>
